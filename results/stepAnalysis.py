# -*- coding: utf-8 -*-
"""UXAnalysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bloTPe4wPPXnRYOviWR9-wb4Am8s85Ps

Add File below, make sure name matches LibraryUXDataAnalysis.xlsx
"""

import re
import unicodedata
import pandas as pd
from google.colab import files

uploaded = files.upload()

df = pd.read_excel("LibraryUXDataAnalysis.xlsx")

"""Every valid steps to complete each scenario and the end goals below"""

scenario1 = [
    ("Library Website", "Use the Library", "hover_menu"),
    ("Library Website", "Services for Students", "button"),
    ("Library Website", "Today's Hours", "link"),
    ("Library Website", "About", "hover_menu"),
    ("Use the Library", "Services for Students", "link_menu"),
    ("Services for Students", "Reserve a Study Space", "link"),
    ("Reserve a Study Space", "View All Opening Hours", "link"),
    ("Services for Students", "View All Opening Hours", "link"),
    ("Today’s Hours", "Opening Hours Page", "root"),
    ("About", "About the Library", "link_menu"),
    ("About", "FAQs", "link_menu"),
    ("About the Library", "Hours", "link"),
    ("FAQs", "View All Hours", "link"),
    ("View All Hours", "Opening Hours Page", "root"),
    ("Hours", "Opening Hours Page", "root"),
    ("View All Opening Hours", "Opening Hours Page", "root")
]
scenario2 = [
    ("Library Website", "Use the Library", "hover_menu"),
    ("Library Website", "Services for Students", "button"),
    ("Library Website", "Study Spaces", "button_tile"),
    ("Use the Library", "Services for Students", "link_menu"),
    ("Use the Library", "Study Spaces", "link_menu"),
    ("Services for Students", "Reserve a Study Space", "link"),
    ("Reserve a Study Space", "All Categories", "link"),
    ("Study Spaces", "Study Spaces Page", "root"),
    ("Study Spaces Page", "Next", "icon"),
    ("Study Spaces Page", "Go to Dates", "button"),
    ("Next", "Space x Time", "button_tile"),
    ("Go to Dates", "Space x Time", "button_tile"),
    ("Space x Time", "End Time", "dropdown"),
    ("Space x Time", "Submit", "button"),
    ("End Time", "Submit", "button")
]
scenario3 = [
    ("Library Website", "One Search", "search_bar"),
    ("Library Website", "Textbooks", "search_bar"),
    ("Library Website", "My Library Account", "link"),
    ("Library Website", "Textbooks", "button_tile"),
    ("One Search", "Search", "icon"),
    ("Textbooks", "Search", "icon"),
    ("My Library Account", "Find", "search_bar"),
    ("Textbooks", "Find", "search_bar"),
    ("Find", "Search", "icon"),
    ("Search", "Book Page", "root"),
    ("Search", "Book Page", "root"),
    ("Book Page", "Book", "link")
]
scenario4 = [
    ("Library Website", "One Search", "search_bar"),
    ("Library Website", "My Library Account", "link"),
    ("Library Website", "Use the Library", "hover_menu"),
    ("Use the Library", "Services for Students", "link_menu"),
    ("Services for Students", "My Library Account", "link"),
    ("One Search", "Search", "icon"),
    ("My Library Account", "Find", "search_bar"),
    ("Find", "Search", "icon"),
    ("Search", "Book Page", "root"),
    ("Search (Icon)", "Book Page", "root"),
    ("Book Page", "Book", "link"),
    ("Book", "Sign In", "button"),
    ("Book", "Request Item", "button"),
    ("Sign In", "Request Item", "button"),
    ("Request Item", "Pick Up Location", "dropdown"),
    ("Pick Up Location", "Send Request", "button")
]
scenario5 = [
    ("Library Website", "Ask a Librarian", "button"),
    ("Library Website", "About", "hover_menu"),
    ("Library Website", "Connect with DVC Library", "link"),
    ("Library Website", "Research", "hover_menu"),
    ("Library Website", "Research Help", "button_tile"),
    ("Library Website", "Use the Library", "hover_menu"),
    ("Library Website", "Services for Students", "button"),
    ("Library Website", "My Library Account", "link"),
    ("About", "About the Library", "link_menu"),
    ("About", "FAQs", "link_menu"),
    ("About", "Contact Us", "link_menu"),
    ("About the Library", "Contact Us", "link"),
    ("FAQs", "Contact Us", "link"),
    ("Research", "Research Help", "link_menu"),
    ("Use the Library", "Services for Students", "link_menu"),
    ("Services for Students", "Ask a Librarian", "link"),
    ("Services for Students", "My Library Account", "link"),
    ("Research Help", "Ask a Librarian", "link"),
    ("Connect with DVC Library", "Contact Page", "root"),
    ("Ask a Librarian", "Contact Page", "root"),
    ("My Library Account", "24/7 Ask a Librarian", "button"),
    ("Contact Us", "Contact Page", "root"),
    ("Contact Page", "Email", "button"),
    ("Contact Page", "Call", "button"),
    ("Contact Page", "Text", "button"),
    ("Contact Page", "Chat", "button")
]
scenario6 = [
    ("Library Website", "Research", "hover_menu"),
    ("Library Website", "Use the Library", "hover_menu"),
    ("Library Website", "Services for Students", "button"),
    ("Library Website", "Research Help", "button_tile"),
    ("Library Website", "My Library Account", "link"),
    ("My Library Account", "Databases", "link"),
    ("Research", "Research Help", "link_menu"),
    ("Research", "Research Guides", "link_menu"),
    ("Research", "Databases A-Z", "link_menu"),
    ("Use the Library", "Services for Students", "link_menu"),
    ("Services for Students", "Research Help", "link"),
    ("Services for Students", "Research Guides", "link"),
    ("Services for Students", "My Library Account", "link"),
    ("Services for Students", "Databases A-Z", "link"),
    ("Research Help", "Research Guides", "link"),
    ("Research Help", "Databases A-Z", "link"),
    ("Research Guides", "Go to A-Z List", "button"),
    ("Go to A-Z List", "Databases Page", "root"),
    ("Databases A-Z", "Databases Page", "root"),
    ("Databases", "Databases Page", "root"),
    ("Databases Page", "Academic Search Complete", "link"),
    ("Academic Search Complete", "Academic Search", "search_bar")
]

scenarios = [
    scenario1, scenario2, scenario3, scenario4, scenario5, scenario6
]

goal1 = [("View All Opening Hours"), ("Opening Hours Page")]
goal2 = [("Submit")]
goal3 = [("Book")]
goal4 = [("Send Request")]
goal5 = [("Ask a Librarian"), ("24/7 Ask a Librarian"), ("Chat"), ("Text"), ("Call"), ("Email")]
goal6 = [("Academic Search")]

goals = [
    goal1, goal2, goal3, goal4, goal5, goal6
]

results = []

"""Normalizing function to deal with different formatting weirdness and remove parenthes from data"""

def normalize(text):
    text = unicodedata.normalize('NFKD', text).replace('’', "'")
    text = re.sub(r'\s*\(.*?\)', '', text)  # remove parentheses
    return text.strip().lower()

"""Algorithm to process data and prepare it to by written into a spreadsheet"""

def analyze_path(participant, actual_path, valid_edges, goal_nodes):
    print(f"\n--- {participant} ---")

    actual_path = [normalize(node) for node in actual_path]
    actual_edges_all = list(zip(actual_path, actual_path[1:]))
    actual_edges = [
        (a, b) for a, b in zip(actual_path, actual_path[1:])
        if not any(ve[0] == a and ve[1] == b and ve[2] == 'root' for ve in valid_edges)
    ] # no root

    deviation_points = []
    goal_reached = any(node in goal_nodes for node in actual_path)

    for a, b in actual_edges:
        if not any(ve[0] == a and ve[1] == b for ve in valid_edges if ve[2] != 'root'):
            deviation_points.append((a, b))

    valid_edge_count = sum(
        1 for edge in actual_edges
        if any(edge[0] == ve[0] and edge[1] == ve[1] for ve in valid_edges if ve[2] != 'root')
    )

    print(f"Valid Steps: {valid_edges}")
    print(f"Actual Path: {' -> '.join(actual_path)}")
    print(f"Valid Steps: {len(actual_edges) - len(deviation_points)} / {len(actual_edges)}")

    if deviation_points:
        print("Deviation Points:")
        for a, b in deviation_points:
            print(f" - Invalid Transition: '{a}' → '{b}'")
    else:
        print("No deviations — all transitions valid.")

    print(f"Reached Goal? {'✅ Yes' if goal_reached else '❌ No'}")

    results.append({
        "Participant": participant,
        "Task #": task + 1,
        "Actual Path": ' -> '.join(actual_path),
        "Reached Goal": "Yes" if goal_reached else "No",
        "# Valid Steps": valid_edge_count,
        "# Invalid Steps": len(deviation_points),
        "Total Steps": len(actual_edges),
        "Deviation Points": '; '.join(f"{a} -> {b}" for a, b in deviation_points)
    })


for _, row in df.iterrows():
    participant = row["Participant"]
    task = int(row["Task #"]) - 1
    actual_path = [step.strip() for step in row["Procedure"].split("->")]

    valid_edges = set(scenarios[task])
    valid_edges = set((normalize(a), normalize(b), c) for a, b, c in valid_edges)

    goal_nodes = set(goals[task])
    goal_nodes = [normalize(node) for node in goal_nodes]

    analyze_path(participant, actual_path, valid_edges, goal_nodes)

"""Creating a spreadsheet with the processed data named UXDataAnalysis.xlsx"""

df_out = pd.DataFrame(results)
df_out.to_excel("UXDataAnalysis.xlsx", index=False)